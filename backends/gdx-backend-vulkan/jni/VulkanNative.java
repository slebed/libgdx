package com.badlogic.gdx.tools.vulkanbindinggen;

/**
 * Native bindings for selected Vulkan functions.
 * Generated by VulkanBindingGenerator.
 * Use with libGDX jnigen.
 */
public final class VulkanNative {

    static {
        // Load the native library. The name must match your build system (e.g., build.gradle jnigen)
        // System.loadLibrary("vulkannative"); // Example name
        // Or use Gdx.app.log for libGDX integration:
        // com.badlogic.gdx.utils.SharedLibraryLoader loader = new com.badlogic.gdx.utils.SharedLibraryLoader();
        // loader.load("vulkannative");
        System.out.println("Native library should be loaded by jnigen build system or manually.");
    }

    private VulkanNative() { /* Private constructor for utility class */ }

    /**
     * Native binding for Vulkan command: vkAllocateCommandBuffers
     * @param device (VkDevice)
     * @param pAllocateInfo (VkCommandBufferAllocateInfo *)
     * @param pCommandBuffers (VkCommandBuffer *)
     */
    public static native long vkAllocateCommandBuffers(long device, long pAllocateInfo, long pCommandBuffers);

    /**
     * Native binding for Vulkan command: vkAllocateDescriptorSets
     * @param device (VkDevice)
     * @param pAllocateInfo (VkDescriptorSetAllocateInfo *)
     * @param pDescriptorSets (VkDescriptorSet *)
     */
    public static native long vkAllocateDescriptorSets(long device, long pAllocateInfo, long pDescriptorSets);

    /**
     * Native binding for Vulkan command: vkAllocateMemory
     * @param device (VkDevice)
     * @param pAllocateInfo (VkMemoryAllocateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pMemory (VkDeviceMemory *)
     */
    public static native long vkAllocateMemory(long device, long pAllocateInfo, long pAllocator, long pMemory);

    /**
     * Native binding for Vulkan command: vkBeginCommandBuffer
     * @param commandBuffer (VkCommandBuffer)
     * @param pBeginInfo (VkCommandBufferBeginInfo *)
     */
    public static native long vkBeginCommandBuffer(long commandBuffer, long pBeginInfo);

    /**
     * Native binding for Vulkan command: vkBindBufferMemory
     * @param device (VkDevice)
     * @param buffer (VkBuffer)
     * @param memory (VkDeviceMemory)
     * @param memoryOffset (VkDeviceSize)
     */
    public static native long vkBindBufferMemory(long device, long buffer, long memory, long memoryOffset);

    /**
     * Native binding for Vulkan command: vkBindBufferMemory2
     * @param device (VkDevice)
     * @param bindInfoCount (uint32_t)
     * @param pBindInfos (VkBindBufferMemoryInfo *)
     */
    public static native long vkBindBufferMemory2(long device, int bindInfoCount, long pBindInfos);

    /**
     * Native binding for Vulkan command: vkBindImageMemory
     * @param device (VkDevice)
     * @param image (VkImage)
     * @param memory (VkDeviceMemory)
     * @param memoryOffset (VkDeviceSize)
     */
    public static native long vkBindImageMemory(long device, long image, long memory, long memoryOffset);

    /**
     * Native binding for Vulkan command: vkBindImageMemory2
     * @param device (VkDevice)
     * @param bindInfoCount (uint32_t)
     * @param pBindInfos (VkBindImageMemoryInfo *)
     */
    public static native long vkBindImageMemory2(long device, int bindInfoCount, long pBindInfos);

    /**
     * Native binding for Vulkan command: vkCmdBeginQuery
     * @param commandBuffer (VkCommandBuffer)
     * @param queryPool (VkQueryPool)
     * @param query (uint32_t)
     * @param flags (VkQueryControlFlags)
     */
    public static native void vkCmdBeginQuery(long commandBuffer, long queryPool, int query, long flags);

    /**
     * Native binding for Vulkan command: vkCmdBeginRenderPass
     * @param commandBuffer (VkCommandBuffer)
     * @param pRenderPassBegin (VkRenderPassBeginInfo *)
     * @param contents (VkSubpassContents)
     */
    public static native void vkCmdBeginRenderPass(long commandBuffer, long pRenderPassBegin, long contents);

    /**
     * Native binding for Vulkan command: vkCmdBindDescriptorSets
     * @param commandBuffer (VkCommandBuffer)
     * @param pipelineBindPoint (VkPipelineBindPoint)
     * @param layout (VkPipelineLayout)
     * @param firstSet (uint32_t)
     * @param descriptorSetCount (uint32_t)
     * @param pDescriptorSets (VkDescriptorSet *)
     * @param dynamicOffsetCount (uint32_t)
     * @param pDynamicOffsets (uint32_t *)
     */
    public static native void vkCmdBindDescriptorSets(long commandBuffer, long pipelineBindPoint, long layout, int firstSet, int descriptorSetCount, long pDescriptorSets, int dynamicOffsetCount, long pDynamicOffsets);

    /**
     * Native binding for Vulkan command: vkCmdBindIndexBuffer
     * @param commandBuffer (VkCommandBuffer)
     * @param buffer (VkBuffer)
     * @param offset (VkDeviceSize)
     * @param indexType (VkIndexType)
     */
    public static native void vkCmdBindIndexBuffer(long commandBuffer, long buffer, long offset, long indexType);

    /**
     * Native binding for Vulkan command: vkCmdBindPipeline
     * @param commandBuffer (VkCommandBuffer)
     * @param pipelineBindPoint (VkPipelineBindPoint)
     * @param pipeline (VkPipeline)
     */
    public static native void vkCmdBindPipeline(long commandBuffer, long pipelineBindPoint, long pipeline);

    /**
     * Native binding for Vulkan command: vkCmdBindVertexBuffers
     * @param commandBuffer (VkCommandBuffer)
     * @param firstBinding (uint32_t)
     * @param bindingCount (uint32_t)
     * @param pBuffers (VkBuffer *)
     * @param pOffsets (VkDeviceSize *)
     */
    public static native void vkCmdBindVertexBuffers(long commandBuffer, int firstBinding, int bindingCount, long pBuffers, long pOffsets);

    /**
     * Native binding for Vulkan command: vkCmdBlitImage
     * @param commandBuffer (VkCommandBuffer)
     * @param srcImage (VkImage)
     * @param srcImageLayout (VkImageLayout)
     * @param dstImage (VkImage)
     * @param dstImageLayout (VkImageLayout)
     * @param regionCount (uint32_t)
     * @param pRegions (VkImageBlit *)
     * @param filter (VkFilter)
     */
    public static native void vkCmdBlitImage(long commandBuffer, long srcImage, long srcImageLayout, long dstImage, long dstImageLayout, int regionCount, long pRegions, long filter);

    /**
     * Native binding for Vulkan command: vkCmdClearAttachments
     * @param commandBuffer (VkCommandBuffer)
     * @param attachmentCount (uint32_t)
     * @param pAttachments (VkClearAttachment *)
     * @param rectCount (uint32_t)
     * @param pRects (VkClearRect *)
     */
    public static native void vkCmdClearAttachments(long commandBuffer, int attachmentCount, long pAttachments, int rectCount, long pRects);

    /**
     * Native binding for Vulkan command: vkCmdClearColorImage
     * @param commandBuffer (VkCommandBuffer)
     * @param image (VkImage)
     * @param imageLayout (VkImageLayout)
     * @param pColor (VkClearColorValue *)
     * @param rangeCount (uint32_t)
     * @param pRanges (VkImageSubresourceRange *)
     */
    public static native void vkCmdClearColorImage(long commandBuffer, long image, long imageLayout, long pColor, int rangeCount, long pRanges);

    /**
     * Native binding for Vulkan command: vkCmdClearDepthStencilImage
     * @param commandBuffer (VkCommandBuffer)
     * @param image (VkImage)
     * @param imageLayout (VkImageLayout)
     * @param pDepthStencil (VkClearDepthStencilValue *)
     * @param rangeCount (uint32_t)
     * @param pRanges (VkImageSubresourceRange *)
     */
    public static native void vkCmdClearDepthStencilImage(long commandBuffer, long image, long imageLayout, long pDepthStencil, int rangeCount, long pRanges);

    /**
     * Native binding for Vulkan command: vkCmdCopyBuffer
     * @param commandBuffer (VkCommandBuffer)
     * @param srcBuffer (VkBuffer)
     * @param dstBuffer (VkBuffer)
     * @param regionCount (uint32_t)
     * @param pRegions (VkBufferCopy *)
     */
    public static native void vkCmdCopyBuffer(long commandBuffer, long srcBuffer, long dstBuffer, int regionCount, long pRegions);

    /**
     * Native binding for Vulkan command: vkCmdCopyBufferToImage
     * @param commandBuffer (VkCommandBuffer)
     * @param srcBuffer (VkBuffer)
     * @param dstImage (VkImage)
     * @param dstImageLayout (VkImageLayout)
     * @param regionCount (uint32_t)
     * @param pRegions (VkBufferImageCopy *)
     */
    public static native void vkCmdCopyBufferToImage(long commandBuffer, long srcBuffer, long dstImage, long dstImageLayout, int regionCount, long pRegions);

    /**
     * Native binding for Vulkan command: vkCmdCopyImage
     * @param commandBuffer (VkCommandBuffer)
     * @param srcImage (VkImage)
     * @param srcImageLayout (VkImageLayout)
     * @param dstImage (VkImage)
     * @param dstImageLayout (VkImageLayout)
     * @param regionCount (uint32_t)
     * @param pRegions (VkImageCopy *)
     */
    public static native void vkCmdCopyImage(long commandBuffer, long srcImage, long srcImageLayout, long dstImage, long dstImageLayout, int regionCount, long pRegions);

    /**
     * Native binding for Vulkan command: vkCmdCopyImageToBuffer
     * @param commandBuffer (VkCommandBuffer)
     * @param srcImage (VkImage)
     * @param srcImageLayout (VkImageLayout)
     * @param dstBuffer (VkBuffer)
     * @param regionCount (uint32_t)
     * @param pRegions (VkBufferImageCopy *)
     */
    public static native void vkCmdCopyImageToBuffer(long commandBuffer, long srcImage, long srcImageLayout, long dstBuffer, int regionCount, long pRegions);

    /**
     * Native binding for Vulkan command: vkCmdCopyQueryPoolResults
     * @param commandBuffer (VkCommandBuffer)
     * @param queryPool (VkQueryPool)
     * @param firstQuery (uint32_t)
     * @param queryCount (uint32_t)
     * @param dstBuffer (VkBuffer)
     * @param dstOffset (VkDeviceSize)
     * @param stride (VkDeviceSize)
     * @param flags (VkQueryResultFlags)
     */
    public static native void vkCmdCopyQueryPoolResults(long commandBuffer, long queryPool, int firstQuery, int queryCount, long dstBuffer, long dstOffset, long stride, long flags);

    /**
     * Native binding for Vulkan command: vkCmdDispatch
     * @param commandBuffer (VkCommandBuffer)
     * @param groupCountX (uint32_t)
     * @param groupCountY (uint32_t)
     * @param groupCountZ (uint32_t)
     */
    public static native void vkCmdDispatch(long commandBuffer, int groupCountX, int groupCountY, int groupCountZ);

    /**
     * Native binding for Vulkan command: vkCmdDispatchBase
     * @param commandBuffer (VkCommandBuffer)
     * @param baseGroupX (uint32_t)
     * @param baseGroupY (uint32_t)
     * @param baseGroupZ (uint32_t)
     * @param groupCountX (uint32_t)
     * @param groupCountY (uint32_t)
     * @param groupCountZ (uint32_t)
     */
    public static native void vkCmdDispatchBase(long commandBuffer, int baseGroupX, int baseGroupY, int baseGroupZ, int groupCountX, int groupCountY, int groupCountZ);

    /**
     * Native binding for Vulkan command: vkCmdDispatchIndirect
     * @param commandBuffer (VkCommandBuffer)
     * @param buffer (VkBuffer)
     * @param offset (VkDeviceSize)
     */
    public static native void vkCmdDispatchIndirect(long commandBuffer, long buffer, long offset);

    /**
     * Native binding for Vulkan command: vkCmdDraw
     * @param commandBuffer (VkCommandBuffer)
     * @param vertexCount (uint32_t)
     * @param instanceCount (uint32_t)
     * @param firstVertex (uint32_t)
     * @param firstInstance (uint32_t)
     */
    public static native void vkCmdDraw(long commandBuffer, int vertexCount, int instanceCount, int firstVertex, int firstInstance);

    /**
     * Native binding for Vulkan command: vkCmdDrawIndexed
     * @param commandBuffer (VkCommandBuffer)
     * @param indexCount (uint32_t)
     * @param instanceCount (uint32_t)
     * @param firstIndex (uint32_t)
     * @param vertexOffset (int32_t)
     * @param firstInstance (uint32_t)
     */
    public static native void vkCmdDrawIndexed(long commandBuffer, int indexCount, int instanceCount, int firstIndex, int vertexOffset, int firstInstance);

    /**
     * Native binding for Vulkan command: vkCmdDrawIndexedIndirect
     * @param commandBuffer (VkCommandBuffer)
     * @param buffer (VkBuffer)
     * @param offset (VkDeviceSize)
     * @param drawCount (uint32_t)
     * @param stride (uint32_t)
     */
    public static native void vkCmdDrawIndexedIndirect(long commandBuffer, long buffer, long offset, int drawCount, int stride);

    /**
     * Native binding for Vulkan command: vkCmdDrawIndirect
     * @param commandBuffer (VkCommandBuffer)
     * @param buffer (VkBuffer)
     * @param offset (VkDeviceSize)
     * @param drawCount (uint32_t)
     * @param stride (uint32_t)
     */
    public static native void vkCmdDrawIndirect(long commandBuffer, long buffer, long offset, int drawCount, int stride);

    /**
     * Native binding for Vulkan command: vkCmdEndQuery
     * @param commandBuffer (VkCommandBuffer)
     * @param queryPool (VkQueryPool)
     * @param query (uint32_t)
     */
    public static native void vkCmdEndQuery(long commandBuffer, long queryPool, int query);

    /**
     * Native binding for Vulkan command: vkCmdEndRenderPass
     * @param commandBuffer (VkCommandBuffer)
     */
    public static native void vkCmdEndRenderPass(long commandBuffer);

    /**
     * Native binding for Vulkan command: vkCmdExecuteCommands
     * @param commandBuffer (VkCommandBuffer)
     * @param commandBufferCount (uint32_t)
     * @param pCommandBuffers (VkCommandBuffer *)
     */
    public static native void vkCmdExecuteCommands(long commandBuffer, int commandBufferCount, long pCommandBuffers);

    /**
     * Native binding for Vulkan command: vkCmdFillBuffer
     * @param commandBuffer (VkCommandBuffer)
     * @param dstBuffer (VkBuffer)
     * @param dstOffset (VkDeviceSize)
     * @param size (VkDeviceSize)
     * @param data (uint32_t)
     */
    public static native void vkCmdFillBuffer(long commandBuffer, long dstBuffer, long dstOffset, long size, int data);

    /**
     * Native binding for Vulkan command: vkCmdNextSubpass
     * @param commandBuffer (VkCommandBuffer)
     * @param contents (VkSubpassContents)
     */
    public static native void vkCmdNextSubpass(long commandBuffer, long contents);

    /**
     * Native binding for Vulkan command: vkCmdPipelineBarrier
     * @param commandBuffer (VkCommandBuffer)
     * @param srcStageMask (VkPipelineStageFlags)
     * @param dstStageMask (VkPipelineStageFlags)
     * @param dependencyFlags (VkDependencyFlags)
     * @param memoryBarrierCount (uint32_t)
     * @param pMemoryBarriers (VkMemoryBarrier *)
     * @param bufferMemoryBarrierCount (uint32_t)
     * @param pBufferMemoryBarriers (VkBufferMemoryBarrier *)
     * @param imageMemoryBarrierCount (uint32_t)
     * @param pImageMemoryBarriers (VkImageMemoryBarrier *)
     */
    public static native void vkCmdPipelineBarrier(long commandBuffer, long srcStageMask, long dstStageMask, long dependencyFlags, int memoryBarrierCount, long pMemoryBarriers, int bufferMemoryBarrierCount, long pBufferMemoryBarriers, int imageMemoryBarrierCount, long pImageMemoryBarriers);

    /**
     * Native binding for Vulkan command: vkCmdPushConstants
     * @param commandBuffer (VkCommandBuffer)
     * @param layout (VkPipelineLayout)
     * @param stageFlags (VkShaderStageFlags)
     * @param offset (uint32_t)
     * @param size (uint32_t)
     * @param pValues (void *)
     */
    public static native void vkCmdPushConstants(long commandBuffer, long layout, long stageFlags, int offset, int size, long pValues);

    /**
     * Native binding for Vulkan command: vkCmdResetEvent
     * @param commandBuffer (VkCommandBuffer)
     * @param event (VkEvent)
     * @param stageMask (VkPipelineStageFlags)
     */
    public static native void vkCmdResetEvent(long commandBuffer, long event, long stageMask);

    /**
     * Native binding for Vulkan command: vkCmdResetQueryPool
     * @param commandBuffer (VkCommandBuffer)
     * @param queryPool (VkQueryPool)
     * @param firstQuery (uint32_t)
     * @param queryCount (uint32_t)
     */
    public static native void vkCmdResetQueryPool(long commandBuffer, long queryPool, int firstQuery, int queryCount);

    /**
     * Native binding for Vulkan command: vkCmdResolveImage
     * @param commandBuffer (VkCommandBuffer)
     * @param srcImage (VkImage)
     * @param srcImageLayout (VkImageLayout)
     * @param dstImage (VkImage)
     * @param dstImageLayout (VkImageLayout)
     * @param regionCount (uint32_t)
     * @param pRegions (VkImageResolve *)
     */
    public static native void vkCmdResolveImage(long commandBuffer, long srcImage, long srcImageLayout, long dstImage, long dstImageLayout, int regionCount, long pRegions);

    /**
     * Native binding for Vulkan command: vkCmdSetBlendConstants
     * @param commandBuffer (VkCommandBuffer)
     * @param blendConstants (float)
     */
    public static native void vkCmdSetBlendConstants(long commandBuffer, float blendConstants);

    /**
     * Native binding for Vulkan command: vkCmdSetDepthBias
     * @param commandBuffer (VkCommandBuffer)
     * @param depthBiasConstantFactor (float)
     * @param depthBiasClamp (float)
     * @param depthBiasSlopeFactor (float)
     */
    public static native void vkCmdSetDepthBias(long commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);

    /**
     * Native binding for Vulkan command: vkCmdSetDepthBounds
     * @param commandBuffer (VkCommandBuffer)
     * @param minDepthBounds (float)
     * @param maxDepthBounds (float)
     */
    public static native void vkCmdSetDepthBounds(long commandBuffer, float minDepthBounds, float maxDepthBounds);

    /**
     * Native binding for Vulkan command: vkCmdSetDeviceMask
     * @param commandBuffer (VkCommandBuffer)
     * @param deviceMask (uint32_t)
     */
    public static native void vkCmdSetDeviceMask(long commandBuffer, int deviceMask);

    /**
     * Native binding for Vulkan command: vkCmdSetEvent
     * @param commandBuffer (VkCommandBuffer)
     * @param event (VkEvent)
     * @param stageMask (VkPipelineStageFlags)
     */
    public static native void vkCmdSetEvent(long commandBuffer, long event, long stageMask);

    /**
     * Native binding for Vulkan command: vkCmdSetLineWidth
     * @param commandBuffer (VkCommandBuffer)
     * @param lineWidth (float)
     */
    public static native void vkCmdSetLineWidth(long commandBuffer, float lineWidth);

    /**
     * Native binding for Vulkan command: vkCmdSetScissor
     * @param commandBuffer (VkCommandBuffer)
     * @param firstScissor (uint32_t)
     * @param scissorCount (uint32_t)
     * @param pScissors (VkRect2D *)
     */
    public static native void vkCmdSetScissor(long commandBuffer, int firstScissor, int scissorCount, long pScissors);

    /**
     * Native binding for Vulkan command: vkCmdSetStencilCompareMask
     * @param commandBuffer (VkCommandBuffer)
     * @param faceMask (VkStencilFaceFlags)
     * @param compareMask (uint32_t)
     */
    public static native void vkCmdSetStencilCompareMask(long commandBuffer, long faceMask, int compareMask);

    /**
     * Native binding for Vulkan command: vkCmdSetStencilReference
     * @param commandBuffer (VkCommandBuffer)
     * @param faceMask (VkStencilFaceFlags)
     * @param reference (uint32_t)
     */
    public static native void vkCmdSetStencilReference(long commandBuffer, long faceMask, int reference);

    /**
     * Native binding for Vulkan command: vkCmdSetStencilWriteMask
     * @param commandBuffer (VkCommandBuffer)
     * @param faceMask (VkStencilFaceFlags)
     * @param writeMask (uint32_t)
     */
    public static native void vkCmdSetStencilWriteMask(long commandBuffer, long faceMask, int writeMask);

    /**
     * Native binding for Vulkan command: vkCmdSetViewport
     * @param commandBuffer (VkCommandBuffer)
     * @param firstViewport (uint32_t)
     * @param viewportCount (uint32_t)
     * @param pViewports (VkViewport *)
     */
    public static native void vkCmdSetViewport(long commandBuffer, int firstViewport, int viewportCount, long pViewports);

    /**
     * Native binding for Vulkan command: vkCmdUpdateBuffer
     * @param commandBuffer (VkCommandBuffer)
     * @param dstBuffer (VkBuffer)
     * @param dstOffset (VkDeviceSize)
     * @param dataSize (VkDeviceSize)
     * @param pData (void *)
     */
    public static native void vkCmdUpdateBuffer(long commandBuffer, long dstBuffer, long dstOffset, long dataSize, long pData);

    /**
     * Native binding for Vulkan command: vkCmdWaitEvents
     * @param commandBuffer (VkCommandBuffer)
     * @param eventCount (uint32_t)
     * @param pEvents (VkEvent *)
     * @param srcStageMask (VkPipelineStageFlags)
     * @param dstStageMask (VkPipelineStageFlags)
     * @param memoryBarrierCount (uint32_t)
     * @param pMemoryBarriers (VkMemoryBarrier *)
     * @param bufferMemoryBarrierCount (uint32_t)
     * @param pBufferMemoryBarriers (VkBufferMemoryBarrier *)
     * @param imageMemoryBarrierCount (uint32_t)
     * @param pImageMemoryBarriers (VkImageMemoryBarrier *)
     */
    public static native void vkCmdWaitEvents(long commandBuffer, int eventCount, long pEvents, long srcStageMask, long dstStageMask, int memoryBarrierCount, long pMemoryBarriers, int bufferMemoryBarrierCount, long pBufferMemoryBarriers, int imageMemoryBarrierCount, long pImageMemoryBarriers);

    /**
     * Native binding for Vulkan command: vkCmdWriteTimestamp
     * @param commandBuffer (VkCommandBuffer)
     * @param pipelineStage (VkPipelineStageFlagBits)
     * @param queryPool (VkQueryPool)
     * @param query (uint32_t)
     */
    public static native void vkCmdWriteTimestamp(long commandBuffer, int pipelineStage, long queryPool, int query);

    /**
     * Native binding for Vulkan command: vkCreateBuffer
     * @param device (VkDevice)
     * @param pCreateInfo (VkBufferCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pBuffer (VkBuffer *)
     */
    public static native long vkCreateBuffer(long device, long pCreateInfo, long pAllocator, long pBuffer);

    /**
     * Native binding for Vulkan command: vkCreateBufferView
     * @param device (VkDevice)
     * @param pCreateInfo (VkBufferViewCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pView (VkBufferView *)
     */
    public static native long vkCreateBufferView(long device, long pCreateInfo, long pAllocator, long pView);

    /**
     * Native binding for Vulkan command: vkCreateCommandPool
     * @param device (VkDevice)
     * @param pCreateInfo (VkCommandPoolCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pCommandPool (VkCommandPool *)
     */
    public static native long vkCreateCommandPool(long device, long pCreateInfo, long pAllocator, long pCommandPool);

    /**
     * Native binding for Vulkan command: vkCreateComputePipelines
     * @param device (VkDevice)
     * @param pipelineCache (VkPipelineCache)
     * @param createInfoCount (uint32_t)
     * @param pCreateInfos (VkComputePipelineCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pPipelines (VkPipeline *)
     */
    public static native long vkCreateComputePipelines(long device, long pipelineCache, int createInfoCount, long pCreateInfos, long pAllocator, long pPipelines);

    /**
     * Native binding for Vulkan command: vkCreateDescriptorPool
     * @param device (VkDevice)
     * @param pCreateInfo (VkDescriptorPoolCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pDescriptorPool (VkDescriptorPool *)
     */
    public static native long vkCreateDescriptorPool(long device, long pCreateInfo, long pAllocator, long pDescriptorPool);

    /**
     * Native binding for Vulkan command: vkCreateDescriptorSetLayout
     * @param device (VkDevice)
     * @param pCreateInfo (VkDescriptorSetLayoutCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pSetLayout (VkDescriptorSetLayout *)
     */
    public static native long vkCreateDescriptorSetLayout(long device, long pCreateInfo, long pAllocator, long pSetLayout);

    /**
     * Native binding for Vulkan command: vkCreateDescriptorUpdateTemplate
     * @param device (VkDevice)
     * @param pCreateInfo (VkDescriptorUpdateTemplateCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pDescriptorUpdateTemplate (VkDescriptorUpdateTemplate *)
     */
    public static native long vkCreateDescriptorUpdateTemplate(long device, long pCreateInfo, long pAllocator, long pDescriptorUpdateTemplate);

    /**
     * Native binding for Vulkan command: vkCreateDevice
     * @param physicalDevice (VkPhysicalDevice)
     * @param pCreateInfo (VkDeviceCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pDevice (VkDevice *)
     */
    public static native long vkCreateDevice(long physicalDevice, long pCreateInfo, long pAllocator, long pDevice);

    /**
     * Native binding for Vulkan command: vkCreateEvent
     * @param device (VkDevice)
     * @param pCreateInfo (VkEventCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pEvent (VkEvent *)
     */
    public static native long vkCreateEvent(long device, long pCreateInfo, long pAllocator, long pEvent);

    /**
     * Native binding for Vulkan command: vkCreateFence
     * @param device (VkDevice)
     * @param pCreateInfo (VkFenceCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pFence (VkFence *)
     */
    public static native long vkCreateFence(long device, long pCreateInfo, long pAllocator, long pFence);

    /**
     * Native binding for Vulkan command: vkCreateFramebuffer
     * @param device (VkDevice)
     * @param pCreateInfo (VkFramebufferCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pFramebuffer (VkFramebuffer *)
     */
    public static native long vkCreateFramebuffer(long device, long pCreateInfo, long pAllocator, long pFramebuffer);

    /**
     * Native binding for Vulkan command: vkCreateGraphicsPipelines
     * @param device (VkDevice)
     * @param pipelineCache (VkPipelineCache)
     * @param createInfoCount (uint32_t)
     * @param pCreateInfos (VkGraphicsPipelineCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pPipelines (VkPipeline *)
     */
    public static native long vkCreateGraphicsPipelines(long device, long pipelineCache, int createInfoCount, long pCreateInfos, long pAllocator, long pPipelines);

    /**
     * Native binding for Vulkan command: vkCreateImage
     * @param device (VkDevice)
     * @param pCreateInfo (VkImageCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pImage (VkImage *)
     */
    public static native long vkCreateImage(long device, long pCreateInfo, long pAllocator, long pImage);

    /**
     * Native binding for Vulkan command: vkCreateImageView
     * @param device (VkDevice)
     * @param pCreateInfo (VkImageViewCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pView (VkImageView *)
     */
    public static native long vkCreateImageView(long device, long pCreateInfo, long pAllocator, long pView);

    /**
     * Native binding for Vulkan command: vkCreateInstance
     * @param pCreateInfo (VkInstanceCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pInstance (VkInstance *)
     */
    public static native long vkCreateInstance(long pCreateInfo, long pAllocator, long pInstance);

    /**
     * Native binding for Vulkan command: vkCreatePipelineCache
     * @param device (VkDevice)
     * @param pCreateInfo (VkPipelineCacheCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pPipelineCache (VkPipelineCache *)
     */
    public static native long vkCreatePipelineCache(long device, long pCreateInfo, long pAllocator, long pPipelineCache);

    /**
     * Native binding for Vulkan command: vkCreatePipelineLayout
     * @param device (VkDevice)
     * @param pCreateInfo (VkPipelineLayoutCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pPipelineLayout (VkPipelineLayout *)
     */
    public static native long vkCreatePipelineLayout(long device, long pCreateInfo, long pAllocator, long pPipelineLayout);

    /**
     * Native binding for Vulkan command: vkCreateQueryPool
     * @param device (VkDevice)
     * @param pCreateInfo (VkQueryPoolCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pQueryPool (VkQueryPool *)
     */
    public static native long vkCreateQueryPool(long device, long pCreateInfo, long pAllocator, long pQueryPool);

    /**
     * Native binding for Vulkan command: vkCreateRenderPass
     * @param device (VkDevice)
     * @param pCreateInfo (VkRenderPassCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pRenderPass (VkRenderPass *)
     */
    public static native long vkCreateRenderPass(long device, long pCreateInfo, long pAllocator, long pRenderPass);

    /**
     * Native binding for Vulkan command: vkCreateSampler
     * @param device (VkDevice)
     * @param pCreateInfo (VkSamplerCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pSampler (VkSampler *)
     */
    public static native long vkCreateSampler(long device, long pCreateInfo, long pAllocator, long pSampler);

    /**
     * Native binding for Vulkan command: vkCreateSamplerYcbcrConversion
     * @param device (VkDevice)
     * @param pCreateInfo (VkSamplerYcbcrConversionCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pYcbcrConversion (VkSamplerYcbcrConversion *)
     */
    public static native long vkCreateSamplerYcbcrConversion(long device, long pCreateInfo, long pAllocator, long pYcbcrConversion);

    /**
     * Native binding for Vulkan command: vkCreateSemaphore
     * @param device (VkDevice)
     * @param pCreateInfo (VkSemaphoreCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pSemaphore (VkSemaphore *)
     */
    public static native long vkCreateSemaphore(long device, long pCreateInfo, long pAllocator, long pSemaphore);

    /**
     * Native binding for Vulkan command: vkCreateShaderModule
     * @param device (VkDevice)
     * @param pCreateInfo (VkShaderModuleCreateInfo *)
     * @param pAllocator (VkAllocationCallbacks *)
     * @param pShaderModule (VkShaderModule *)
     */
    public static native long vkCreateShaderModule(long device, long pCreateInfo, long pAllocator, long pShaderModule);

    /**
     * Native binding for Vulkan command: vkDestroyBuffer
     * @param device (VkDevice)
     * @param buffer (VkBuffer)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroyBuffer(long device, long buffer, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroyBufferView
     * @param device (VkDevice)
     * @param bufferView (VkBufferView)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroyBufferView(long device, long bufferView, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroyCommandPool
     * @param device (VkDevice)
     * @param commandPool (VkCommandPool)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroyCommandPool(long device, long commandPool, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroyDescriptorPool
     * @param device (VkDevice)
     * @param descriptorPool (VkDescriptorPool)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroyDescriptorPool(long device, long descriptorPool, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroyDescriptorSetLayout
     * @param device (VkDevice)
     * @param descriptorSetLayout (VkDescriptorSetLayout)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroyDescriptorSetLayout(long device, long descriptorSetLayout, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroyDescriptorUpdateTemplate
     * @param device (VkDevice)
     * @param descriptorUpdateTemplate (VkDescriptorUpdateTemplate)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroyDescriptorUpdateTemplate(long device, long descriptorUpdateTemplate, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroyDevice
     * @param device (VkDevice)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroyDevice(long device, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroyEvent
     * @param device (VkDevice)
     * @param event (VkEvent)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroyEvent(long device, long event, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroyFence
     * @param device (VkDevice)
     * @param fence (VkFence)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroyFence(long device, long fence, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroyFramebuffer
     * @param device (VkDevice)
     * @param framebuffer (VkFramebuffer)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroyFramebuffer(long device, long framebuffer, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroyImage
     * @param device (VkDevice)
     * @param image (VkImage)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroyImage(long device, long image, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroyImageView
     * @param device (VkDevice)
     * @param imageView (VkImageView)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroyImageView(long device, long imageView, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroyInstance
     * @param instance (VkInstance)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroyInstance(long instance, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroyPipeline
     * @param device (VkDevice)
     * @param pipeline (VkPipeline)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroyPipeline(long device, long pipeline, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroyPipelineCache
     * @param device (VkDevice)
     * @param pipelineCache (VkPipelineCache)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroyPipelineCache(long device, long pipelineCache, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroyPipelineLayout
     * @param device (VkDevice)
     * @param pipelineLayout (VkPipelineLayout)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroyPipelineLayout(long device, long pipelineLayout, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroyQueryPool
     * @param device (VkDevice)
     * @param queryPool (VkQueryPool)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroyQueryPool(long device, long queryPool, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroyRenderPass
     * @param device (VkDevice)
     * @param renderPass (VkRenderPass)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroyRenderPass(long device, long renderPass, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroySampler
     * @param device (VkDevice)
     * @param sampler (VkSampler)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroySampler(long device, long sampler, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroySamplerYcbcrConversion
     * @param device (VkDevice)
     * @param ycbcrConversion (VkSamplerYcbcrConversion)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroySamplerYcbcrConversion(long device, long ycbcrConversion, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroySemaphore
     * @param device (VkDevice)
     * @param semaphore (VkSemaphore)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroySemaphore(long device, long semaphore, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDestroyShaderModule
     * @param device (VkDevice)
     * @param shaderModule (VkShaderModule)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkDestroyShaderModule(long device, long shaderModule, long pAllocator);

    /**
     * Native binding for Vulkan command: vkDeviceWaitIdle
     * @param device (VkDevice)
     */
    public static native long vkDeviceWaitIdle(long device);

    /**
     * Native binding for Vulkan command: vkEndCommandBuffer
     * @param commandBuffer (VkCommandBuffer)
     */
    public static native long vkEndCommandBuffer(long commandBuffer);

    /**
     * Native binding for Vulkan command: vkEnumerateDeviceExtensionProperties
     * @param physicalDevice (VkPhysicalDevice)
     * @param pLayerName (char *)
     * @param pPropertyCount (uint32_t *)
     * @param pProperties (VkExtensionProperties *)
     */
    public static native long vkEnumerateDeviceExtensionProperties(long physicalDevice, long pLayerName, long pPropertyCount, long pProperties);

    /**
     * Native binding for Vulkan command: vkEnumerateDeviceLayerProperties
     * @param physicalDevice (VkPhysicalDevice)
     * @param pPropertyCount (uint32_t *)
     * @param pProperties (VkLayerProperties *)
     */
    public static native long vkEnumerateDeviceLayerProperties(long physicalDevice, long pPropertyCount, long pProperties);

    /**
     * Native binding for Vulkan command: vkEnumerateInstanceExtensionProperties
     * @param pLayerName (char *)
     * @param pPropertyCount (uint32_t *)
     * @param pProperties (VkExtensionProperties *)
     */
    public static native long vkEnumerateInstanceExtensionProperties(long pLayerName, long pPropertyCount, long pProperties);

    /**
     * Native binding for Vulkan command: vkEnumerateInstanceLayerProperties
     * @param pPropertyCount (uint32_t *)
     * @param pProperties (VkLayerProperties *)
     */
    public static native long vkEnumerateInstanceLayerProperties(long pPropertyCount, long pProperties);

    /**
     * Native binding for Vulkan command: vkEnumerateInstanceVersion
     * @param pApiVersion (uint32_t *)
     */
    public static native long vkEnumerateInstanceVersion(long pApiVersion);

    /**
     * Native binding for Vulkan command: vkEnumeratePhysicalDeviceGroups
     * @param instance (VkInstance)
     * @param pPhysicalDeviceGroupCount (uint32_t *)
     * @param pPhysicalDeviceGroupProperties (VkPhysicalDeviceGroupProperties *)
     */
    public static native long vkEnumeratePhysicalDeviceGroups(long instance, long pPhysicalDeviceGroupCount, long pPhysicalDeviceGroupProperties);

    /**
     * Native binding for Vulkan command: vkEnumeratePhysicalDevices
     * @param instance (VkInstance)
     * @param pPhysicalDeviceCount (uint32_t *)
     * @param pPhysicalDevices (VkPhysicalDevice *)
     */
    public static native long vkEnumeratePhysicalDevices(long instance, long pPhysicalDeviceCount, long pPhysicalDevices);

    /**
     * Native binding for Vulkan command: vkFlushMappedMemoryRanges
     * @param device (VkDevice)
     * @param memoryRangeCount (uint32_t)
     * @param pMemoryRanges (VkMappedMemoryRange *)
     */
    public static native long vkFlushMappedMemoryRanges(long device, int memoryRangeCount, long pMemoryRanges);

    /**
     * Native binding for Vulkan command: vkFreeCommandBuffers
     * @param device (VkDevice)
     * @param commandPool (VkCommandPool)
     * @param commandBufferCount (uint32_t)
     * @param pCommandBuffers (VkCommandBuffer *)
     */
    public static native void vkFreeCommandBuffers(long device, long commandPool, int commandBufferCount, long pCommandBuffers);

    /**
     * Native binding for Vulkan command: vkFreeDescriptorSets
     * @param device (VkDevice)
     * @param descriptorPool (VkDescriptorPool)
     * @param descriptorSetCount (uint32_t)
     * @param pDescriptorSets (VkDescriptorSet *)
     */
    public static native long vkFreeDescriptorSets(long device, long descriptorPool, int descriptorSetCount, long pDescriptorSets);

    /**
     * Native binding for Vulkan command: vkFreeMemory
     * @param device (VkDevice)
     * @param memory (VkDeviceMemory)
     * @param pAllocator (VkAllocationCallbacks *)
     */
    public static native void vkFreeMemory(long device, long memory, long pAllocator);

    /**
     * Native binding for Vulkan command: vkGetBufferMemoryRequirements
     * @param device (VkDevice)
     * @param buffer (VkBuffer)
     * @param pMemoryRequirements (VkMemoryRequirements *)
     */
    public static native void vkGetBufferMemoryRequirements(long device, long buffer, long pMemoryRequirements);

    /**
     * Native binding for Vulkan command: vkGetBufferMemoryRequirements2
     * @param device (VkDevice)
     * @param pInfo (VkBufferMemoryRequirementsInfo2 *)
     * @param pMemoryRequirements (VkMemoryRequirements2 *)
     */
    public static native void vkGetBufferMemoryRequirements2(long device, long pInfo, long pMemoryRequirements);

    /**
     * Native binding for Vulkan command: vkGetDescriptorSetLayoutSupport
     * @param device (VkDevice)
     * @param pCreateInfo (VkDescriptorSetLayoutCreateInfo *)
     * @param pSupport (VkDescriptorSetLayoutSupport *)
     */
    public static native void vkGetDescriptorSetLayoutSupport(long device, long pCreateInfo, long pSupport);

    /**
     * Native binding for Vulkan command: vkGetDeviceGroupPeerMemoryFeatures
     * @param device (VkDevice)
     * @param heapIndex (uint32_t)
     * @param localDeviceIndex (uint32_t)
     * @param remoteDeviceIndex (uint32_t)
     * @param pPeerMemoryFeatures (VkPeerMemoryFeatureFlags *)
     */
    public static native void vkGetDeviceGroupPeerMemoryFeatures(long device, int heapIndex, int localDeviceIndex, int remoteDeviceIndex, long pPeerMemoryFeatures);

    /**
     * Native binding for Vulkan command: vkGetDeviceMemoryCommitment
     * @param device (VkDevice)
     * @param memory (VkDeviceMemory)
     * @param pCommittedMemoryInBytes (VkDeviceSize *)
     */
    public static native void vkGetDeviceMemoryCommitment(long device, long memory, long pCommittedMemoryInBytes);

    /**
     * Native binding for Vulkan command: vkGetDeviceProcAddr
     * @param device (VkDevice)
     * @param pName (char *)
     */
    public static native long vkGetDeviceProcAddr(long device, long pName);

    /**
     * Native binding for Vulkan command: vkGetDeviceQueue
     * @param device (VkDevice)
     * @param queueFamilyIndex (uint32_t)
     * @param queueIndex (uint32_t)
     * @param pQueue (VkQueue *)
     */
    public static native void vkGetDeviceQueue(long device, int queueFamilyIndex, int queueIndex, long pQueue);

    /**
     * Native binding for Vulkan command: vkGetDeviceQueue2
     * @param device (VkDevice)
     * @param pQueueInfo (VkDeviceQueueInfo2 *)
     * @param pQueue (VkQueue *)
     */
    public static native void vkGetDeviceQueue2(long device, long pQueueInfo, long pQueue);

    /**
     * Native binding for Vulkan command: vkGetEventStatus
     * @param device (VkDevice)
     * @param event (VkEvent)
     */
    public static native long vkGetEventStatus(long device, long event);

    /**
     * Native binding for Vulkan command: vkGetFenceStatus
     * @param device (VkDevice)
     * @param fence (VkFence)
     */
    public static native long vkGetFenceStatus(long device, long fence);

    /**
     * Native binding for Vulkan command: vkGetImageMemoryRequirements
     * @param device (VkDevice)
     * @param image (VkImage)
     * @param pMemoryRequirements (VkMemoryRequirements *)
     */
    public static native void vkGetImageMemoryRequirements(long device, long image, long pMemoryRequirements);

    /**
     * Native binding for Vulkan command: vkGetImageMemoryRequirements2
     * @param device (VkDevice)
     * @param pInfo (VkImageMemoryRequirementsInfo2 *)
     * @param pMemoryRequirements (VkMemoryRequirements2 *)
     */
    public static native void vkGetImageMemoryRequirements2(long device, long pInfo, long pMemoryRequirements);

    /**
     * Native binding for Vulkan command: vkGetImageSparseMemoryRequirements
     * @param device (VkDevice)
     * @param image (VkImage)
     * @param pSparseMemoryRequirementCount (uint32_t *)
     * @param pSparseMemoryRequirements (VkSparseImageMemoryRequirements *)
     */
    public static native void vkGetImageSparseMemoryRequirements(long device, long image, long pSparseMemoryRequirementCount, long pSparseMemoryRequirements);

    /**
     * Native binding for Vulkan command: vkGetImageSparseMemoryRequirements2
     * @param device (VkDevice)
     * @param pInfo (VkImageSparseMemoryRequirementsInfo2 *)
     * @param pSparseMemoryRequirementCount (uint32_t *)
     * @param pSparseMemoryRequirements (VkSparseImageMemoryRequirements2 *)
     */
    public static native void vkGetImageSparseMemoryRequirements2(long device, long pInfo, long pSparseMemoryRequirementCount, long pSparseMemoryRequirements);

    /**
     * Native binding for Vulkan command: vkGetImageSubresourceLayout
     * @param device (VkDevice)
     * @param image (VkImage)
     * @param pSubresource (VkImageSubresource *)
     * @param pLayout (VkSubresourceLayout *)
     */
    public static native void vkGetImageSubresourceLayout(long device, long image, long pSubresource, long pLayout);

    /**
     * Native binding for Vulkan command: vkGetInstanceProcAddr
     * @param instance (VkInstance)
     * @param pName (char *)
     */
    public static native long vkGetInstanceProcAddr(long instance, long pName);

    /**
     * Native binding for Vulkan command: vkGetPhysicalDeviceExternalBufferProperties
     * @param physicalDevice (VkPhysicalDevice)
     * @param pExternalBufferInfo (VkPhysicalDeviceExternalBufferInfo *)
     * @param pExternalBufferProperties (VkExternalBufferProperties *)
     */
    public static native void vkGetPhysicalDeviceExternalBufferProperties(long physicalDevice, long pExternalBufferInfo, long pExternalBufferProperties);

    /**
     * Native binding for Vulkan command: vkGetPhysicalDeviceExternalFenceProperties
     * @param physicalDevice (VkPhysicalDevice)
     * @param pExternalFenceInfo (VkPhysicalDeviceExternalFenceInfo *)
     * @param pExternalFenceProperties (VkExternalFenceProperties *)
     */
    public static native void vkGetPhysicalDeviceExternalFenceProperties(long physicalDevice, long pExternalFenceInfo, long pExternalFenceProperties);

    /**
     * Native binding for Vulkan command: vkGetPhysicalDeviceExternalSemaphoreProperties
     * @param physicalDevice (VkPhysicalDevice)
     * @param pExternalSemaphoreInfo (VkPhysicalDeviceExternalSemaphoreInfo *)
     * @param pExternalSemaphoreProperties (VkExternalSemaphoreProperties *)
     */
    public static native void vkGetPhysicalDeviceExternalSemaphoreProperties(long physicalDevice, long pExternalSemaphoreInfo, long pExternalSemaphoreProperties);

    /**
     * Native binding for Vulkan command: vkGetPhysicalDeviceFeatures
     * @param physicalDevice (VkPhysicalDevice)
     * @param pFeatures (VkPhysicalDeviceFeatures *)
     */
    public static native void vkGetPhysicalDeviceFeatures(long physicalDevice, long pFeatures);

    /**
     * Native binding for Vulkan command: vkGetPhysicalDeviceFeatures2
     * @param physicalDevice (VkPhysicalDevice)
     * @param pFeatures (VkPhysicalDeviceFeatures2 *)
     */
    public static native void vkGetPhysicalDeviceFeatures2(long physicalDevice, long pFeatures);

    /**
     * Native binding for Vulkan command: vkGetPhysicalDeviceFormatProperties
     * @param physicalDevice (VkPhysicalDevice)
     * @param format (VkFormat)
     * @param pFormatProperties (VkFormatProperties *)
     */
    public static native void vkGetPhysicalDeviceFormatProperties(long physicalDevice, long format, long pFormatProperties);

    /**
     * Native binding for Vulkan command: vkGetPhysicalDeviceFormatProperties2
     * @param physicalDevice (VkPhysicalDevice)
     * @param format (VkFormat)
     * @param pFormatProperties (VkFormatProperties2 *)
     */
    public static native void vkGetPhysicalDeviceFormatProperties2(long physicalDevice, long format, long pFormatProperties);

    /**
     * Native binding for Vulkan command: vkGetPhysicalDeviceImageFormatProperties
     * @param physicalDevice (VkPhysicalDevice)
     * @param format (VkFormat)
     * @param type (VkImageType)
     * @param tiling (VkImageTiling)
     * @param usage (VkImageUsageFlags)
     * @param flags (VkImageCreateFlags)
     * @param pImageFormatProperties (VkImageFormatProperties *)
     */
    public static native long vkGetPhysicalDeviceImageFormatProperties(long physicalDevice, long format, long type, long tiling, long usage, long flags, long pImageFormatProperties);

    /**
     * Native binding for Vulkan command: vkGetPhysicalDeviceImageFormatProperties2
     * @param physicalDevice (VkPhysicalDevice)
     * @param pImageFormatInfo (VkPhysicalDeviceImageFormatInfo2 *)
     * @param pImageFormatProperties (VkImageFormatProperties2 *)
     */
    public static native long vkGetPhysicalDeviceImageFormatProperties2(long physicalDevice, long pImageFormatInfo, long pImageFormatProperties);

    /**
     * Native binding for Vulkan command: vkGetPhysicalDeviceMemoryProperties
     * @param physicalDevice (VkPhysicalDevice)
     * @param pMemoryProperties (VkPhysicalDeviceMemoryProperties *)
     */
    public static native void vkGetPhysicalDeviceMemoryProperties(long physicalDevice, long pMemoryProperties);

    /**
     * Native binding for Vulkan command: vkGetPhysicalDeviceMemoryProperties2
     * @param physicalDevice (VkPhysicalDevice)
     * @param pMemoryProperties (VkPhysicalDeviceMemoryProperties2 *)
     */
    public static native void vkGetPhysicalDeviceMemoryProperties2(long physicalDevice, long pMemoryProperties);

    /**
     * Native binding for Vulkan command: vkGetPhysicalDeviceProperties
     * @param physicalDevice (VkPhysicalDevice)
     * @param pProperties (VkPhysicalDeviceProperties *)
     */
    public static native void vkGetPhysicalDeviceProperties(long physicalDevice, long pProperties);

    /**
     * Native binding for Vulkan command: vkGetPhysicalDeviceProperties2
     * @param physicalDevice (VkPhysicalDevice)
     * @param pProperties (VkPhysicalDeviceProperties2 *)
     */
    public static native void vkGetPhysicalDeviceProperties2(long physicalDevice, long pProperties);

    /**
     * Native binding for Vulkan command: vkGetPhysicalDeviceQueueFamilyProperties
     * @param physicalDevice (VkPhysicalDevice)
     * @param pQueueFamilyPropertyCount (uint32_t *)
     * @param pQueueFamilyProperties (VkQueueFamilyProperties *)
     */
    public static native void vkGetPhysicalDeviceQueueFamilyProperties(long physicalDevice, long pQueueFamilyPropertyCount, long pQueueFamilyProperties);

    /**
     * Native binding for Vulkan command: vkGetPhysicalDeviceQueueFamilyProperties2
     * @param physicalDevice (VkPhysicalDevice)
     * @param pQueueFamilyPropertyCount (uint32_t *)
     * @param pQueueFamilyProperties (VkQueueFamilyProperties2 *)
     */
    public static native void vkGetPhysicalDeviceQueueFamilyProperties2(long physicalDevice, long pQueueFamilyPropertyCount, long pQueueFamilyProperties);

    /**
     * Native binding for Vulkan command: vkGetPhysicalDeviceSparseImageFormatProperties
     * @param physicalDevice (VkPhysicalDevice)
     * @param format (VkFormat)
     * @param type (VkImageType)
     * @param samples (VkSampleCountFlagBits)
     * @param usage (VkImageUsageFlags)
     * @param tiling (VkImageTiling)
     * @param pPropertyCount (uint32_t *)
     * @param pProperties (VkSparseImageFormatProperties *)
     */
    public static native void vkGetPhysicalDeviceSparseImageFormatProperties(long physicalDevice, long format, long type, int samples, long usage, long tiling, long pPropertyCount, long pProperties);

    /**
     * Native binding for Vulkan command: vkGetPhysicalDeviceSparseImageFormatProperties2
     * @param physicalDevice (VkPhysicalDevice)
     * @param pFormatInfo (VkPhysicalDeviceSparseImageFormatInfo2 *)
     * @param pPropertyCount (uint32_t *)
     * @param pProperties (VkSparseImageFormatProperties2 *)
     */
    public static native void vkGetPhysicalDeviceSparseImageFormatProperties2(long physicalDevice, long pFormatInfo, long pPropertyCount, long pProperties);

    /**
     * Native binding for Vulkan command: vkGetPipelineCacheData
     * @param device (VkDevice)
     * @param pipelineCache (VkPipelineCache)
     * @param pDataSize (size_t *)
     * @param pData (void *)
     */
    public static native long vkGetPipelineCacheData(long device, long pipelineCache, long pDataSize, long pData);

    /**
     * Native binding for Vulkan command: vkGetQueryPoolResults
     * @param device (VkDevice)
     * @param queryPool (VkQueryPool)
     * @param firstQuery (uint32_t)
     * @param queryCount (uint32_t)
     * @param dataSize (size_t)
     * @param pData (void *)
     * @param stride (VkDeviceSize)
     * @param flags (VkQueryResultFlags)
     */
    public static native long vkGetQueryPoolResults(long device, long queryPool, int firstQuery, int queryCount, long dataSize, long pData, long stride, long flags);

    /**
     * Native binding for Vulkan command: vkGetRenderAreaGranularity
     * @param device (VkDevice)
     * @param renderPass (VkRenderPass)
     * @param pGranularity (VkExtent2D *)
     */
    public static native void vkGetRenderAreaGranularity(long device, long renderPass, long pGranularity);

    /**
     * Native binding for Vulkan command: vkInvalidateMappedMemoryRanges
     * @param device (VkDevice)
     * @param memoryRangeCount (uint32_t)
     * @param pMemoryRanges (VkMappedMemoryRange *)
     */
    public static native long vkInvalidateMappedMemoryRanges(long device, int memoryRangeCount, long pMemoryRanges);

    /**
     * Native binding for Vulkan command: vkMapMemory
     * @param device (VkDevice)
     * @param memory (VkDeviceMemory)
     * @param offset (VkDeviceSize)
     * @param size (VkDeviceSize)
     * @param flags (VkMemoryMapFlags)
     * @param ppData (void **)
     */
    public static native long vkMapMemory(long device, long memory, long offset, long size, long flags, long ppData);

    /**
     * Native binding for Vulkan command: vkMergePipelineCaches
     * @param device (VkDevice)
     * @param dstCache (VkPipelineCache)
     * @param srcCacheCount (uint32_t)
     * @param pSrcCaches (VkPipelineCache *)
     */
    public static native long vkMergePipelineCaches(long device, long dstCache, int srcCacheCount, long pSrcCaches);

    /**
     * Native binding for Vulkan command: vkQueueBindSparse
     * @param queue (VkQueue)
     * @param bindInfoCount (uint32_t)
     * @param pBindInfo (VkBindSparseInfo *)
     * @param fence (VkFence)
     */
    public static native long vkQueueBindSparse(long queue, int bindInfoCount, long pBindInfo, long fence);

    /**
     * Native binding for Vulkan command: vkQueueSubmit
     * @param queue (VkQueue)
     * @param submitCount (uint32_t)
     * @param pSubmits (VkSubmitInfo *)
     * @param fence (VkFence)
     */
    public static native long vkQueueSubmit(long queue, int submitCount, long pSubmits, long fence);

    /**
     * Native binding for Vulkan command: vkQueueWaitIdle
     * @param queue (VkQueue)
     */
    public static native long vkQueueWaitIdle(long queue);

    /**
     * Native binding for Vulkan command: vkResetCommandBuffer
     * @param commandBuffer (VkCommandBuffer)
     * @param flags (VkCommandBufferResetFlags)
     */
    public static native long vkResetCommandBuffer(long commandBuffer, long flags);

    /**
     * Native binding for Vulkan command: vkResetCommandPool
     * @param device (VkDevice)
     * @param commandPool (VkCommandPool)
     * @param flags (VkCommandPoolResetFlags)
     */
    public static native long vkResetCommandPool(long device, long commandPool, long flags);

    /**
     * Native binding for Vulkan command: vkResetDescriptorPool
     * @param device (VkDevice)
     * @param descriptorPool (VkDescriptorPool)
     * @param flags (VkDescriptorPoolResetFlags)
     */
    public static native long vkResetDescriptorPool(long device, long descriptorPool, long flags);

    /**
     * Native binding for Vulkan command: vkResetEvent
     * @param device (VkDevice)
     * @param event (VkEvent)
     */
    public static native long vkResetEvent(long device, long event);

    /**
     * Native binding for Vulkan command: vkResetFences
     * @param device (VkDevice)
     * @param fenceCount (uint32_t)
     * @param pFences (VkFence *)
     */
    public static native long vkResetFences(long device, int fenceCount, long pFences);

    /**
     * Native binding for Vulkan command: vkSetEvent
     * @param device (VkDevice)
     * @param event (VkEvent)
     */
    public static native long vkSetEvent(long device, long event);

    /**
     * Native binding for Vulkan command: vkTrimCommandPool
     * @param device (VkDevice)
     * @param commandPool (VkCommandPool)
     * @param flags (VkCommandPoolTrimFlags)
     */
    public static native void vkTrimCommandPool(long device, long commandPool, long flags);

    /**
     * Native binding for Vulkan command: vkUnmapMemory
     * @param device (VkDevice)
     * @param memory (VkDeviceMemory)
     */
    public static native void vkUnmapMemory(long device, long memory);

    /**
     * Native binding for Vulkan command: vkUpdateDescriptorSetWithTemplate
     * @param device (VkDevice)
     * @param descriptorSet (VkDescriptorSet)
     * @param descriptorUpdateTemplate (VkDescriptorUpdateTemplate)
     * @param pData (void *)
     */
    public static native void vkUpdateDescriptorSetWithTemplate(long device, long descriptorSet, long descriptorUpdateTemplate, long pData);

    /**
     * Native binding for Vulkan command: vkUpdateDescriptorSets
     * @param device (VkDevice)
     * @param descriptorWriteCount (uint32_t)
     * @param pDescriptorWrites (VkWriteDescriptorSet *)
     * @param descriptorCopyCount (uint32_t)
     * @param pDescriptorCopies (VkCopyDescriptorSet *)
     */
    public static native void vkUpdateDescriptorSets(long device, int descriptorWriteCount, long pDescriptorWrites, int descriptorCopyCount, long pDescriptorCopies);

    /**
     * Native binding for Vulkan command: vkWaitForFences
     * @param device (VkDevice)
     * @param fenceCount (uint32_t)
     * @param pFences (VkFence *)
     * @param waitAll (VkBool32)
     * @param timeout (uint64_t)
     */
    public static native long vkWaitForFences(long device, int fenceCount, long pFences, int waitAll, long timeout);

}
